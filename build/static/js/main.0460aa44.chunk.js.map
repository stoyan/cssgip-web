{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","files","data","document","documentElement","ondragenter","e","preventDefault","ondragover","ondrop","update","dataTransfer","target","moreFiles","newFiles","Array","from","concat","setState","process","_this2","slice","forEach","f","idx","i","Image","onload","image","setTimeout","img","res","gip","css","palettes","pretty","src","window","URL","createObjectURL","react_default","a","createElement","className","App_Uploads","onChange","handleUploads","bind","App_Results","href","Component","Uploads","_ref","htmlFor","role","type","id","multiple","accept","style","display","Results","_ref2","length","width","map","startsWith","key","verticalAlign","background","alt","height","opacity","cursor","float","naturalWidth","naturalHeight","onClick","ev","textAlign","keys","pal","ix","p","border","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0460aa44.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport gip from 'cssgip-browser';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      files: [],\n      data: [], // data about them files, after processing\n    };\n    document.documentElement.ondragenter = e => e.preventDefault();\n    document.documentElement.ondragover = e => e.preventDefault();\n    document.documentElement.ondrop = e => {\n      e.preventDefault();\n      this.update(e.dataTransfer.files);\n    }\n  }\n  \n  handleUploads(e) {\n    this.update(e.target.files);\n  }\n  \n  update(moreFiles) {\n    const newFiles = Array.from(moreFiles);\n    if (!newFiles) {\n      return;\n    }\n    const files = this.state.files.concat(newFiles);\n    this.setState({files});\n    this.process(files);\n  }\n  \n  process(files) {\n    const data = this.state.data.slice();\n    files.forEach((f, idx) => {\n      if (!data[idx]) {\n        const i = new Image();\n        i.onload = () => {\n          data[idx] = {\n            image: i,\n          };\n          this.setState({data});\n          setTimeout(() => {\n            const res = doTheThing(i);\n            data[idx] = {\n              image: i,\n              css: res.css,\n              palettes: res.palettes,\n              pretty: res.pretty,\n            }\n            this.setState({data});\n          }, 100);\n        };\n        i.src = window.URL.createObjectURL(f);\n      }\n    });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Gradient Image Placeholder Generator</h1>\n          <p>\n            Upload or drop a photo or a few and get some background CSS to use as a placeholder\n          </p>\n        </div>\n        <div className=\"Tool-in\">\n          <Uploads onChange={this.handleUploads.bind(this)} />\n        </div>\n        <div className=\"Tool-out\">\n          <Results files={this.state.files} data={this.state.data} />\n        </div>\n        <div className=\"App-footer\">\n          <p>\n            Built by <a href=\"https://twitter.com/stoyanstefanov\">Stoyan</a>. \n            The <a href=\"http://calendar.perfplanet.com/2018/gradient-image-placeholders/\">how, why, etc.</a> blog post. \n            The <a href=\"https://github.com/stoyan/cssgip-web\">code is here</a>.\n          </p>\n          <p>\n            Hosting by <a href=\"https://www.dreamhost.com/r.cgi?447675\">Dreamhost</a>,\n            domain name by <a href=\"https://www.namecheap.com/?aff=107836\">Namecheap</a>.\n            Bye-bye now, take care then!\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Uploads = ({onChange}) =>\n  <div>\n    <label htmlFor=\"files\" className=\"Uploads-select\" role=\"button\">Select files...</label>\n    <input \n      type=\"file\" \n      id=\"files\" \n      multiple \n      accept=\"image/*\" \n      style={{display: 'none'}} \n      onChange={onChange}\n    />\n  </div>;\n\n\nconst Results = ({files, data}) => {\n  if (files.length === 0) {return <span/>;}\n  return (\n    <table className=\"Results-table\">\n      <tbody>\n      <tr><th width=\"30%\">result</th><th width=\"20%\">code</th><th width=\"50%\">palette</th></tr>\n      {files.map((f, idx) => {\n        if (!f.type.startsWith('image/')) {\n          return null;\n        }\n        return (\n          <tr key={idx}>\n            <td style={{verticalAlign: 'top'}}>\n              {\n                data[idx]\n                  ? data[idx].css\n                    ? <div style={{\n                        background: data[idx].css[1],\n                        display: 'inline-block',\n                        }}>\n                        <img \n                          src={data[idx].image.src} \n                          alt={idx} \n                          style={{\n                            height: 'auto',\n                            opacity: 0,\n                            cursor: 'pointer',\n                            float: 'left',\n                          }}\n                          width={data[idx].image.naturalWidth}\n                          height={data[idx].image.naturalHeight}\n                          onClick={ev => {\n                            ev.target.style.opacity = ev.target.style.opacity === \"0\" ? 1 : 0\n                          }}\n                        />\n                      </div>\n                    : data[idx].image\n                      ? <img alt={idx} src={data[idx].image.src} />\n                      : 'munch, munch...'\n                  : 'crunch, crunch...'\n              }\n            </td>\n            <td style={{verticalAlign: 'top'}}>\n              <pre style={{textAlign: 'left'}}>\n               {(data[idx] && data[idx].css)\n                  ? 'background: ' + data[idx].css[0] + ';\\nbackground: ' + data[idx].pretty\n                  : 'crunching...'\n               }\n              </pre>\n            </td>\n            <td style={{verticalAlign: 'top'}}>{\n              (data[idx] && data[idx].palettes)\n                ? Object.keys(data[idx].palettes).map((pal, ix) => (\n                  <table style={{float: 'left'}} key={ix}>\n                  <thead><tr><th>{pal}</th></tr></thead>\n                  <tbody>{\n                    data[idx].palettes[pal].map((p, idx) => \n                      (\n                        <tr key={idx}>\n                          <td style={{background: p, border: 0}}><code>{p}</code></td>\n                        </tr>\n                      )\n                    )\n                  }</tbody></table>\n                ))\n                : null}\n            </td>\n          </tr>\n        );\n      })}\n      </tbody>\n    </table>\n  );\n}\n\n\nfunction doTheThing(img) {\n  return gip(img, true);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}